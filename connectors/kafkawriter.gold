package connectors

import (
	"fmt"
	"log"
	"os"
	"sync"
	"time"
	common "wb/adslog/common"

	kafka "github.com/segmentio/kafka-go"
)

var kafkaWriterConnections map[string]*kafka.Writer
var kafkaWriterOnce map[string]bool
var kafkaWriterOnceMutex sync.Mutex

// KafkaWriter return the writer to the topic name
func KafkaWriter(name string) *kafka.Writer {

	if name == "" {
		log.Println("KafkaWriter's name cannot be empty")
		return nil
	}

	if len(kafkaWriterOnce) == 0 {
		kafkaWriterOnce = make(map[string]bool, 15)
		kafkaWriterConnections = make(map[string]*kafka.Writer, 15)
	}

	kafkaWriterOnceMutex.Lock()
	if !kafkaWriterOnce[name] {
		kafkaWriterOnce[name] = true

		kafkaBrokersFromConfig, err := common.GetApp().Config.GetArray("kafka", name+".brokers")
		if err != nil {
			fmt.Println("KafkaWriter brokers list cannot be empty")
			os.Exit(1)
		}

		kkConnection := kafka.NewWriter(kafka.WriterConfig{
			Brokers:      kafkaBrokersFromConfig,
			Topic:        name,
			Balancer:     &kafka.LeastBytes{},
			BatchTimeout: 10 * time.Millisecond,
		})
		kafkaWriterConnections[name] = kkConnection
		kafkaWriterOnceMutex.Unlock()
	} else {
		kafkaWriterOnceMutex.Unlock()
	}
	return kafkaWriterConnections[name]
}
